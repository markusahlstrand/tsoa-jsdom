/// <reference types="@cloudflare/workers-types" />
import { Key as TokenKey } from 'path-to-regexp';
import { Context, Handler, Params } from './types';
export { Context };
/** Valid HTTP methods for matching. */
export declare type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS';
export declare type MethodWildcard = 'ALL';
export interface Route<Handler> {
    method: Method | MethodWildcard;
    path: string;
    regexp: RegExp;
    keys: Keys;
    handler: Handler;
}
/**
 * The object returned when a route matches.
 *
 * The handler can then be used to execute the relevant function.
 *
 * @example
 * {
 *   params: Params
 *   matches?: RegExpExecArray
 *   method: Method | MethodWildcard
 *   path: string
 *   regexp: RegExp
 *   options: RouteOptions
 *   keys: Keys
 *   handler: Handler
 * }
 */
export interface RouteMatch<Handler> extends Route<Handler> {
    params: Params;
    matches?: RegExpExecArray;
}
export declare type Key = TokenKey;
export declare type Keys = Array<Key>;
/**
 * Cloudworkder-router
 *
 * @example
 * import { Router, Method, Params } from 'cloudworker-router'
 *
 * const router = new Router<Handler>()
 */
export declare class Router<Env = {
    [key: string]: string | DurableObjectNamespace | KVNamespace | Fetcher;
}> {
    /** List of all registered routes. */
    routes: Array<Route<Handler<Env>>>;
    /** Add a route that matches any method. */
    all(path: string, handler: Handler<Env>): this;
    /** Add a route that matches the GET method. */
    get(path: string | RegExp, ...handlers: Handler<Env>[]): this;
    /** Add a route that matches the POST method. */
    post(path: string | RegExp, ...handlers: Handler<Env>[]): this;
    /** Add a route that matches the PUT method. */
    put(path: string | RegExp, ...handlers: Handler<Env>[]): this;
    /** Add a route that matches the PATCH method. */
    patch(path: string | RegExp, ...handlers: Handler<Env>[]): this;
    /** Add a route that matches the DELETE method. */
    delete(path: string | RegExp, ...handlers: Handler<Env>[]): this;
    /** Add a route that matches the HEAD method. */
    head(path: string | RegExp, ...handlers: Handler<Env>[]): this;
    /** Add a route that matches the OPTIONS method. */
    options(path: string | RegExp, ...handlers: Handler<Env>[]): this;
    /** Add a middlewares handler */
    use(handler: Handler<Env>): this;
    /** Add a middlewares for handling options requets */
    allowedMethods(): Handler<Env>;
    matches(method: Method, path: string): RouteMatch<Handler<Env>>[];
    protected handleMatches<Env>(ctx: Context<Env>, ...routeMatches: RouteMatch<Handler<Env>>[]): any;
    handle(request: Request, env: Env, context: ExecutionContext): Promise<Response>;
    private push;
}
